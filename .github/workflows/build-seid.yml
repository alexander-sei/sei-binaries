name: Build and Release seid and price-feeder

on:
  push:
    branches:
      - main

env:
  REPO: ${{ github.repository }}

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            goos: linux
            goarch: amd64
          - os: ubuntu-22.04
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: arm64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Set up Go 1.21
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'

      - name: Install Dependencies (Linux Only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential fakeroot dpkg-dev
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Verify Cross-Compiler Installation
        if: runner.os == 'Linux' && matrix.goarch == 'arm64'
        run: |
          which aarch64-linux-gnu-gcc || echo "aarch64-linux-gnu-gcc not found in PATH"
          aarch64-linux-gnu-gcc --version || echo "Unable to execute aarch64-linux-gnu-gcc"
          ls /usr/bin/aarch64-linux-gnu-gcc* || echo "Compiler binaries not found"

      - name: Read Version
        id: read_version
        shell: bash
        run: |
          if [ -f version.txt ]; then
            echo "Using version from version.txt."
            # Check if version.txt contains exactly one line
            if [ "$(wc -l < version.txt)" -ne 1 ]; then
              echo "Error: version.txt must contain exactly one version"
              exit 1
            fi
            VERSION=$(cat version.txt)
          else
            echo "Fetching the latest tag from git."
            git fetch --tags
            LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
            VERSION="$LATEST_TAG"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and Upload Binaries
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          set -e
          mkdir -p binaries

          VERSION="${{ steps.read_version.outputs.version }}"
          echo "Processing version $VERSION for $GOOS/$GOARCH"

          # Check if release exists
            if gh release view $VERSION &>/dev/null; then
              echo "Release $VERSION already exists."
              exit 0
            fi

            # Clone and checkout the specified version
            git clone https://github.com/sei-protocol/sei-chain.git sei-chain-$VERSION
            cd sei-chain-$VERSION
            git checkout tags/$VERSION

            # Ensure Go modules are downloaded
            go mod download

            # Find the wasmvm version
            WASMVM_VERSION=$(go list -m all | grep 'github.com/CosmWasm/wasmvm' | awk '{print $2}')
            echo "Detected wasmvm version: $WASMVM_VERSION"

            # Determine the appropriate static libwasmvm binary filename
            if [[ "$GOOS" == "linux" ]]; then
              if [[ "$GOARCH" == "amd64" ]]; then
                LIBWASMVM_FILENAME="libwasmvm_muslc.x86_64.a"
              elif [[ "$GOARCH" == "arm64" ]]; then
                LIBWASMVM_FILENAME="libwasmvm_muslc.aarch64.a"
              else
                echo "Unsupported GOARCH: $GOARCH for GOOS: $GOOS"
                exit 1
              fi
            elif [[ "$GOOS" == "darwin" ]]; then
              LIBWASMVM_FILENAME="libwasmvmstatic_darwin.a"
            else
              echo "Unsupported GOOS: $GOOS"
              exit 1
            fi

            LIBWASMVM_URL="https://github.com/CosmWasm/wasmvm/releases/download/$WASMVM_VERSION/$LIBWASMVM_FILENAME"
            echo "Downloading static libwasmvm from $LIBWASMVM_URL"
            curl -L -o $LIBWASMVM_FILENAME $LIBWASMVM_URL

            # Create lib directory and move the library
            mkdir -p lib
            mv $LIBWASMVM_FILENAME lib/libwasmvm.a

            if [[ ! -f lib/libwasmvm.a ]]; then
              echo "Failed to locate the renamed wasmvm library."
              exit 1
            fi

            # Set environment variables for static linking
            export CGO_ENABLED=1
            export CGO_CFLAGS="-I$PWD/lib"
            export CGO_LDFLAGS="-L$PWD/lib -lwasmvm -lm"
            export CGO_LDFLAGS_ALLOW="-Wl,-rpath=.*"

            # Set CC and CXX for cross-compilation if necessary
            if [[ "$GOOS" == "linux" ]] && [[ "$GOARCH" == "arm64" ]]; then
              export CC=aarch64-linux-gnu-gcc
              export CXX=aarch64-linux-gnu-g++
            fi

            # Build seid binary (normal version)
            echo "Building seid (normal version)"
            GOOS=$GOOS GOARCH=$GOARCH make build

            # Build price-feeder binary
            if [[ "$GOOS" == "linux" ]] && [[ "$GOARCH" == "amd64" ]]; then
              echo "Building price-feeder"
              GOOS=$GOOS GOARCH=$GOARCH go build -o ./build/price-feeder ./oracle/price-feeder
            else 
              echo "Not building price-feeder except for Linux amd64"
            fi

            cd ..

            # Copy binaries to a temporary directory
            mkdir -p temp_binaries

            cp "sei-chain-$VERSION/build/seid" "temp_binaries/seid-${VERSION}-${GOOS}-${GOARCH}"
            
            if [[ "$GOOS" == "linux" ]] && [[ "$GOARCH" == "amd64" ]]; then
              cp "sei-chain-$VERSION/build/price-feeder" "temp_binaries/price-feeder-${VERSION}-${GOOS}-${GOARCH}"
            fi

            # Build Pebble version of seid
            echo "Building seid (Pebble version)"
            cp -r sei-chain-$VERSION sei-chain-$VERSION-pebble
            cd sei-chain-$VERSION-pebble

            # Modify go.mod for Pebble
            go mod edit -replace github.com/tendermint/tm-db=github.com/Bro-chain/tm-db@pebble
            go mod tidy

            # Set variables for Pebble build
            PEBBLE_SEARCH="-X github.com/cosmos/cosmos-sdk/version.Version=\\\$(VERSION)"
            PEBBLE_REPLACE="-X github.com/cosmos/cosmos-sdk/types.DBBackend=pebbledb -X github.com/tendermint/tm-db.ForceSync=1"

            # Modify Makefile for Pebble
            sed -i.bak -e "s|${PEBBLE_SEARCH}|${PEBBLE_SEARCH} ${PEBBLE_REPLACE}|" Makefile

            # Build seid with Pebble support
            GOOS=$GOOS GOARCH=$GOARCH make build -B TENDERMINT_BUILD_OPTIONS=pebbledb BUILD_TAGS=pebbledb

            cd ..

            cp "sei-chain-$VERSION-pebble/build/seid" "temp_binaries/seid-pebble-${VERSION}-${GOOS}-${GOARCH}"

            # Package into .deb if on Linux
            if [[ "$GOOS" == "linux" ]]; then
              echo "Packaging binaries into .deb package"

              # Create package directory structure
              mkdir -p deb_pkg/DEBIAN
              mkdir -p deb_pkg/usr/local/bin

              # Copy normal seid binary
              cp sei-chain-$VERSION/build/seid deb_pkg/usr/local/bin/
              # Create symbolic link called 'sei' pointing to 'seid'
              cd deb_pkg/usr/local/bin
              ln -s seid sei
              cd -

              # Create control file
              printf "Package: sei\nVersion: ${VERSION#v}\nSection: base\nPriority: optional\nArchitecture: ${GOARCH}\nDepends: libc6 (>= 2.7)\nMaintainer: Alexander-sei <alexander@seifdn.org>\nDescription: Sei Chain binaries (seid)\n" > deb_pkg/DEBIAN/control

              # Build the .deb package
              dpkg-deb --build deb_pkg "sei-${VERSION}-${GOOS}-${GOARCH}.deb"

              # Move the .deb package to temp_binaries
              mv "sei-${VERSION}-${GOOS}-${GOARCH}.deb" temp_binaries

              # Clean up packaging directory
              rm -rf deb_pkg

              echo "Packaging Pebble binaries into .deb package"

              # Create package directory structure
              mkdir -p pebble_deb_pkg/DEBIAN
              mkdir -p pebble_deb_pkg/usr/local/bin

              # Copy Pebble seid binary
              cp sei-chain-$VERSION-pebble/build/seid pebble_deb_pkg/usr/local/bin/
              # Create symbolic link for sei pointing to seid
              cd pebble_deb_pkg/usr/local/bin
              ln -s seid sei
              cd -

              # Create control file
              printf "Package: sei-pebble\nVersion: ${VERSION#v}\nSection: base\nPriority: optional\nArchitecture: ${GOARCH}\nDepends: libc6 (>= 2.7)\nMaintainer: Alexander-sei <alexander@seifdn.org>\nDescription: Sei Chain binaries (seid with Pebble support)\n" > pebble_deb_pkg/DEBIAN/control

              # Build the .deb package
              dpkg-deb --build pebble_deb_pkg "sei-pebble-${VERSION}-${GOOS}-${GOARCH}.deb"

              # Move the .deb package to temp_binaries
              mv "sei-pebble-${VERSION}-${GOOS}-${GOARCH}.deb" temp_binaries

              # Clean up packaging directory
              rm -rf pebble_deb_pkg
            fi

            # Prepare the release
            if gh release view $VERSION &> /dev/null; then
              echo "Release $VERSION already exists."
            else
              # Try to get release notes from sei-chain repository
              if gh release view $VERSION --repo sei-protocol/sei-chain &>/dev/null; then
                # Get the release notes
                RELEASE_BODY=$(gh release view $VERSION --repo sei-protocol/sei-chain --json body --jq .body)
                echo "Using release notes from sei-chain repository."
              else
                # Try to get tag message as release body
                RELEASE_BODY=$(git tag -l --format="%(contents)" $VERSION)
                # If tag message is empty, set default release body
                if [ -z "$RELEASE_BODY" ]; then
                    RELEASE_BODY="Release $VERSION"
                fi
                echo "Using local tag message as release body."
              fi
              RELEASE_BODY="${RELEASE_BODY//$'\r'/}"
              # Update release notes with checksums
              echo -e "$RELEASE_BODY" > release_body.txt
              # Append the note about source code archives
              echo -e "\n\n**Note:** The default 'Source code (zip)' and 'Source code (tar.gz)' archives generated by GitHub are not useful. Please use the attached 'sei-chain-$VERSION.zip' and 'sei-chain-$VERSION.tar.gz' files from the original 'sei-chain' repository." >> release_body.txt
              # Append the SHA256 Checksums header
              echo -e "\n\n**SHA256 Checksums:**\n" >> release_body.txt
              gh release create $VERSION --notes-file release_body.txt
              # Upload source code archives
              ZIP_URL="https://github.com/sei-protocol/sei-chain/archive/refs/tags/$VERSION.zip"
              TAR_GZ_URL="https://github.com/sei-protocol/sei-chain/archive/refs/tags/$VERSION.tar.gz"
              curl -L -o "sei-chain-$VERSION.zip" "$ZIP_URL"
              curl -L -o "sei-chain-$VERSION.tar.gz" "$TAR_GZ_URL"
              gh release upload $VERSION "sei-chain-$VERSION.zip#sei-chain-$VERSION.zip"
              gh release upload $VERSION "sei-chain-$VERSION.tar.gz#sei-chain-$VERSION.tar.gz"
            fi

            # Compute checksums and upload binaries
            cd temp_binaries
            for FILE in *; do
              CHECKSUM=$(shasum -a 256 "$FILE" | awk '{ print $1 }')
              echo "$FILE: $CHECKSUM" >> "../checksum_info.txt"

              # Upload binary and checksum to the release
              gh release upload $VERSION "$FILE"
            done

            cd ..

            # Update release notes with checksums
            rm -rf release_body.txt

            # Get the current release body
            if RELEASE_BODY=$(gh release view $VERSION --json body --jq .body); then
              echo "$RELEASE_BODY" > release_body.txt
            else
              RELEASE_BODY="Release $VERSION"
              echo "$RELEASE_BODY" > release_body.txt
            fi

            # Append checksums to release body
            cat "checksum_info.txt" | while read line; do
              echo "\`\`\`${line}\`\`\`" >> release_body.txt
            done

            gh release edit $VERSION --notes-file release_body.txt

            # Clean up temporary files
            rm -rf sei-chain-$VERSION sei-chain-$VERSION-pebble temp_binaries release_body.txt checksum_info.txt
